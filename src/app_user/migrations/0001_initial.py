# Generated by Django 4.1.5 on 2023-01-26 17:17

import app_user.models.user
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=256, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('mobile_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator('^{?(0?9[0-9]{9,9}}?)$', 'Invalid Mobile Number Format.')], verbose_name='Mobile Number')),
                ('national_id', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(9999999999)], verbose_name='National ID')),
                ('profile_image', models.ImageField(null=True, upload_to=app_user.models.user.profile_image_directory_path, verbose_name='Profile Image')),
                ('creator_email', models.EmailField(default=models.EmailField(max_length=256, unique=True, verbose_name='Email'), max_length=254)),
                ('position', models.CharField(choices=[('CEO', 'CEO'), ('EXP', 'Expert'), ('STK', 'Storekeeper'), ('AGN', 'Agent'), ('SUP', 'Supporter')], max_length=3, verbose_name='Position')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_manage_ceo_user', models.BooleanField(default=False, verbose_name='Can Manage User CEO Position')),
                ('can_manage_expert_user', models.BooleanField(default=False, verbose_name='Can Manage User Expert Position')),
                ('can_manage_storekeeper_user', models.BooleanField(default=False, verbose_name='Can Manage User Storekeeper Position')),
                ('can_manage_agent_user', models.BooleanField(default=False, verbose_name='Can Manage User Agent Position')),
                ('can_manage_supporter_user', models.BooleanField(default=False, verbose_name='Can Manage User Supporter Position')),
                ('can_manage_psp', models.BooleanField(default=False, verbose_name='Can Manage PSP')),
                ('can_manage_machine', models.BooleanField(default=False, verbose_name='Can Manage Machine')),
                ('can_see_machine_history', models.BooleanField(default=False, verbose_name='Can See Machine History')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_custom_permissions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
    ]
